@startuml
abstract class AbstractFlyingObject
{
    # locationX:int
    # locationY:int
    # speedX:int
    # speedY:int
    # image:BufferedImage
    # width:int
    # height:int
    # isValid:boolean

    + AbstractFlyingObject(int locationX, int locationY, int speedX, int speedY)
    + forward():void
    + crash(AbstractFlyingObject flyingObject):boolean
    + setLocation(double locationX, double locationY):void
    + getLocationX():int
    + getLocationY():int
    + getSpeedY():int
    + getSpeedX():int
    + getImage():BufferedImage
    + getWidth():int
    + getHeight():int
    + notValid():boolean
    + vanish():void
}

AbstractFlyingObject <|-- AbstractAircraft
AbstractFlyingObject <|-- AbstractProp

interface EnemyFactory{
   + enemyCreator():AbstractAircraft
}

interface PropFactory{
   + propCreator(AbstractAircraft enemyAircraft):AbstractProp
}

abstract class AbstractAircraft
{
	# maxHp:int
    # hp:int
    + AbstractAircraft(int locationX, int locationY, int speedX, int speedY, int hp)
    + decreaseHp(int decrease):void
    + getHp():int
    + {abstract} shoot():List<BaseBullet>
 }


abstract class AbstractProp{
    + AbstractProp(int locationX, int locationY, int speedX, int speedY)
    + {abstract}function(HeroAircraft heroAircraft,List<AbstractAircraft> enemyAircrafts):void
}

EnemyFactory <|.. MobFactory
EnemyFactory <|.. EliteFactory
EnemyFactory <|.. BossFactory

PropFactory <|.. BloodPropFactory
PropFactory <|.. BombPropFactory
PropFactory <|.. FirePropFactory

AbstractAircraft <|-- MobEnemy
AbstractAircraft <|-- EliteEnemy
AbstractAircraft <|-- BossEnemy

AbstractProp <|-- BloodProp
AbstractProp <|-- BombProp
AbstractProp <|-- FireProp

MobFactory ..> MobEnemy
EliteFactory ..> EliteEnemy
BossFactory ..> BossEnemy

BloodPropFactory ..> BloodProp
BombPropFactory ..> BombProp
FirePropFactory ..> FireProp


class MobFactory{
    + enemyCreator():AbstractAircraft
}

class EliteFactory{
    + enemyCreator():AbstractAircraft
}

class BossFactory{
    + enemyCreator():AbstractAircraft
}

class BloodPropFactory{
    + propCreator(AbstractAircraft enemyAircraft):AbstractProp
}

class BombPropFactory{
    + propCreator(AbstractAircraft enemyAircraft):AbstractProp
}

class FirePropFactory{
    + propCreator(AbstractAircraft enemyAircraft):AbstractProp
}

class MobEnemy {
    + MobEnemy(int locationX, int locationY, int speedX, int speedY, int hp)
    + forward():void
    + shoot():List<BaseBullet>
}

class EliteEnemy{
    - int shootNum
    - int power
    - int direction
    + EliteEnemy(int locationX, int locationY, int speedX, int speedY, int hp)
    + forward():void
    + shoot():List<BaseBullet>
}

class BossEnemy{
    - int shootNum
    - int power
    - int direction
    + EliteEnemy(int locationX, int locationY, int speedX, int speedY, int hp)
    + forward():void
    + shoot():List<BaseBullet>
}

class BloodProp{
    + BloodProp(int locationX, int locationY, int speedX, int speedY)
    + function(HeroAircraft heroAircraft,List<AbstractAircraft> enemyAircrafts):void
}
class BombProp{
    + BombProp(int locationX, int locationY, int speedX, int speedY)
    + function(HeroAircraft heroAircraft,List<AbstractAircraft> enemyAircrafts):void
}
class FireProp{
    + FireProp(int locationX, int locationY, int speedX, int speedY)
    + function(HeroAircraft heroAircraft,List<AbstractAircraft> enemyAircrafts):void
}
@enduml